---
name: Start EC2 actions runner
description: Starts and registers a self-hosted GitHub actions repository runner (Linux on AWS EC2)

inputs:
  subnets:
    description: A list of subnets that match the default region
    required: true
  aws-region:
    description: AWS region, e.g. eu-west-1
    required: true
  aws-access-key-id:
    description: AWS access key ID (pass via GitHub secret). Required only if **not** using OIDC
    required: false
  aws-secret-access-key:
    description: AWS secret access key (pass via GitHub secret). Required only if **not** using OIDC
    required: false
  aws-role-to-assume:
    description: AWS IAM role (ARN) to assume, for launching the instance. Required if using OIDC (AssumeRoleWithWebIdentity)
    required: false
  ami:
    description: The EC2 AMI to base the server on
    required: true
  instance_type:
    description: The server type, i.e. t2.micro
    required: true
  vpc_security_group_ids:
    description: The security group ID's to use
    required: true
  github-token:
    description: GitHub token (PAT with repo scope, pass via GitHub secret)
    required: true
  github-repo:
    description: Github repository, e.g. ghost/example. Defaults to current repository
    default: ${{ github.repository }}
    required: false
  runner-labels:
    description: Extra runner labels (comma-separated). Can be referenced in job 'runs-on'
    required: false
  runner-home:
    description: Directory that contains actions-runner software and scripts
    required: false
    default: /home/ubuntu/actions-runner
  runner-user:
    description: User to run the actions-runner service as
    required: false
    default: ubuntu
  ephemeral:
    description: Flag the runner as ephemeral? An ephemeral runner is automatically de-registered after running _one_ workflow job
    required: false
    default: true

outputs:
  runner-id:
    description: GitHub repository runner id
    value: ${{ steps.main.outputs.runner-id }}
  instance-id:
    description: AWS EC2 instance id
    value: ${{ steps.main.outputs.instance-id }}


runs:
  using: composite
  steps:

    - id: auth
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ inputs.aws-region }}
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        role-to-assume: ${{ inputs.aws-role-to-assume }}
        role-session-name: ec2-actions-runner-start
        role-duration-seconds: 900

    - id: main
      shell: bash
      run: |
        runner_token="$(gh api -X POST "repos/$GH_REPO/actions/runners/registration-token" | jq -r .token)"
        
        if [ "$EPHEMERAL" = "true" ]; then
            extra_flags="--ephemeral"
        fi

        if [ -n "$RUNNER_LABELS" ]; then
            extra_labels=",$RUNNER_LABELS"
        fi

        cd $GITHUB_WORKSPACE/ec2-actions-runner/terraform/modules/aws_instance
        export TF_VAR_subnets=$SUBNETS
        export TF_VAR_ami=$AMI
        export TF_VAR_instance_type=$SERVER_TYPE
        export TF_VAR_aws_region=$AWS_DEFAULT_REGION
        export TF_VAR_vpc_security_group_ids=$HCLOUD_TOKEN
        export TF_VAR_runner_home=$RUNNER_HOME
        export TF_VAR_runner_user=$RUNNER_USER
        export TF_VAR_extra_flags=$extra_flags
        export TF_VAR_gh_repo=$GH_REPO
        export TF_VAR_runner_token=$runner_token
        terraform init
        terraform apply --auto-approve
        instance_id=$(terraform output -raw id)
        echo $instance_id
        echo "Waiting for repository runner to be registered ..."
        echo "::set-output name=instance-id::$instance_id"

        for i in {1..12}; do
            sleep 10
            runner_id=$(gh api -X GET "repos/$GH_REPO/actions/runners" -f per_page=100 \
              | jq -r --arg INSTANCE_ID "$instance_id" '.runners[] | select(.name == $INSTANCE_ID and .status == "online") | .id')
            if [ -n "$runner_id" ]; then
                break
            fi
        done
        if [ -z "$runner_id" ]; then
            echo "Runner registration failed (timed out). destroying instance ..."
            terraform destroy --auto-approve
            exit 1
        else
            echo "::set-output name=runner-id::$runner_id"
            echo "Repository runner started (ID: $runner_id)"
        fi
        
        
      env:
        SUBNETS: ${{ inputs.subnets }}
        AMI: ${{ inputs.ami }}
        SERVER_TYPE: ${{ inputs.server_type }}
        GH_TOKEN: ${{ inputs.github-token }}
        AWS_DEFAULT_REGION: ${{ inputs.aws-region }}
        VPC_SECURITY_GROUP_IDS: ${{ inputs.vpc_security_group_ids }}
        GH_REPO: ${{ inputs.github-repo }}
        RUNNER_HOME: ${{ inputs.runner-home }}
        RUNNER_USER: ${{ inputs.runner-user }}
        RUNNER_LABELS: ${{ inputs.runner-labels }}
        EPHEMERAL: ${{ inputs.ephemeral }}